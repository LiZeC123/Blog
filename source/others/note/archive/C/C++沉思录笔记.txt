抽象
	抽象是有选择的忽略，数据抽象比面向对象更有吸引力

编程语言只是一个工具，不要为了用C++而使用C++

句柄（handle）类



虚函数
	除非定义为虚函数，否则对指针和引用的调用，总是调用静态类型的函数

只为用得到的东西付出代价

使用引用比使用指针，可以更加安全的使用动态类型。
但是虽然一个new一个已有的类，需要考虑释放的问题，但是这样也不用起名字了。
只需要约定，在最后一次性释放容器中的所有内存即可。在某些一次性的场合中，反而也省事了

抽象基类的问题
	定义了一个抽象基类以后，因为基类本身并没有空间，所以不能声明基类，如果需要多态，只能使用指针，但是保存局部变量的指针，并不是一个好主意，所以应该动态分配
	那么在此时，约定最后释放全部内容是合适的

使用虚拷贝函数
	但是因为使用指针，存在复制的问题，因此应该定义适当的虚拷贝函数
具体来说，即在基类中定义一个虚拷贝函数，在各个子类中，重载该函数。在该函数中，使用new一个由拷贝构造函数构造产生的和自己相同的新实例，并返回其指针


虚函数，重载和多态
	在C++中，只用定义为虚函数的函数才能被动态绑定的执行，否则执行静态类型的对应函数，既然这个变量是多态的，那么必定需要指向动态绑定版本的函数，所以如果子类中定义了一个和基类同名的函数，却又不是重载，那么几乎必定是错误的（在动态绑定时，永远不会被执行）

定义代理类
	定义一个新的类，该类不继承基类，但是具有和子类公共部分相同的接口，这样可以避免使用动态分配
	代理类中包含一个参数为基类引用的函数，这样该函数可以接受任何继承自基类的对象
因为基类是抽象的，所以可以使用nullptr来表示指向基类，从而定义空参数的构造函数
