This note after C++ 
所有变量都是引用，所有传递都是值传递

如何向文件输出
	在文件流上构建其他的流入PrintStream，即可在上面自由的使用相关的格式化输出函数
	同理在文件流上构建Scanner，也可以像标准输入一样获得相关的格式化函数

有关编码问题
注意，如果有编码问题，可以在OutputStreamWriter或者InputStreamReader中第二个参数指定编码
注意：在使用高级的流时，因为已经提供了字节流转字符流的功能，因此在这些流的构造函数中，也往往提供了指定编码方式的方案具体可以查阅相关流的文档。
如果修改了流的编码方式，需要在输入和输出流上均指定相同的编码，否则容易产生错误


如何打开原有项目或者创建一个新的项目
	在workspace中的所有项目在eclipse中都会显示出来，所以只需要打开软件再选择即可
	新建项目按照以下步骤，new->Java Project->填写相关内容，右键单击src，new->class
	注意：在new class时，记得勾选 public static void main（String[] args）

使用eclipse进行打包
	首先选择导出，在导出类型上，选择可执行jar文件
	之后在弹出的菜单中，选择该项目的启动文件，以及相关的库的打包方法
	最后选择导出路径，即可完成一个项目的打包

eclipse代码提示 alt + /
如果提示错误的时候有黄色的灯泡，表示可以为这一错误提供解决方案
在括号中数据结束以后，直接输入回车可以离开括号
输入syso自动补全System.out.println



插入断点与跟踪调试
	在对应行号的地方双击，即可插入一个断点


相同变量颜色
黄色表示被赋值，灰色表示被使用


Java参数传递是复制还是引用问题
	Java中的对象本身不对应一块内存，而是包含一个内存的指针，在所有地方参数都是复制传递的，即对这个指针进行拷贝。
	对于基本类型，同样可以视为不对应内存，而是包含一个指针，但是因为这个类型除了*和=以外没有其他操作，所以不能产生其他对象一样共享内存的效果。
思想体现1：
	对于范围for循环，每次都序列中的一个值赋值给循环变量，从而该变量获得一个指针的拷贝，如果调用对象的方法，可以改变对象的值。
	但是对于基本类型，因为只能使这个指针指向另外一块内存，所以原来的对象的值不变。
	从而可以预见，如果自己定义的对象也只进行赋值操作，同样无法改变原来对象的值
思想体现2：
	在Object的默认clone中，对每个变量进行拷贝，于是新对象获得了原来对象的指针拷贝，因为基本类型不可变，所以表现的看起来像是被拷贝了，在以后赋予新值的时候，相当于指向了一块新的内存，而其他对象，因为是可变的，从而会导致修改一个，影响另外一个的后果。
	所以对象拷贝的思路也就是new一块和原来一样的内存

定义二维数组
int [][] = new int [3][5]

Java中未初始化的变量会赋予默认值


字符串处理
java的char使用Unicode，所以可以使用汉字

Java强制类型转化
	在Java中，强制转化都是有截断过程的，如果超过范围，会适当的取余，以便于目标类型可以容纳




可以获得对应数据的最大值与最小值
例如Integer.MAX_VALUE
Character中包含一套与ctype.h中类似的函数




函数
与C类似，需要加上相当的前缀
Public static boolean Isprimer
注意多数函数都是需要static的
因为static的函数只能调用static的函数，访问static的变量，因为不是static的函数，总是和某个对象关联在一起
直接调用，就无法知道是在调用哪一个对象
static的函数，是属于类的，而不属于任何一个对象


Java 不能定义同名的变量，即使它们在不同的大括号中



每一个成员都需要单独的public或者private修饰
	不加关键字，则自动friendly，但是和C++的friend定义不同，这里friendly指同一个包里面的类可以访问 
注意：每一个自己做得对象都是需要new的

同样使用this来对应调用者，this是一个成员变量，直接.
在定义的函数的参数里面，如果有和成员变量相同名称的变量，也是允许的，但是如果不加上this，则永远使用的都是函数参数
所以，可以见到这样的语法
void setPrice(int price){
	this.price = price;
}

类的public与文件
	在一个java文件中，只能有一个public的类，如果有其他类，或者定义在其他文件中，或者只能不加上public关键字
	public的类，必须和java文件保持统一的名称


在new一个package的时候，可以创建例如display.led这样的名字，从而在display目录下创建了一个更深入的目录

类的static成员和C++一致


向eclipse导入已有的工程
	把工程目录复制到workspace下，然后new一个和该工程同名的工程，就可以自动导入



容器

private ArrayList<String> notebook = new ArrayList<>(); 
	显然这是一个和C++中模板差不多的东西，注意多按alt + /自动补全package名称

ArrayList成员函数
http://www.cnblogs.com/skywang12345/p/3308556.html
名称构造基本和C++一致，但是即使声明父类，存放子类也不会被阉割，不懂的看代码补全和提示的文档

其他的容器
HashSet 也就是一个set
HashMap 也就是python里面的dictionary，也是C++里面的map
注意所有的必须是对象，所以不能用int作为key，但是Integer可以


Eclipse黑科技
在suorce选项中可以选择一些快速操作，例如 根据内容创建构造器，创建tostring函数等
选择override，可以选择父类中的函数，然后进行重写
public class DVD extends Item
public class CD  extends Item
CD和DVD继承自Item






父类成员访问属性	在父类中的含义				在子类中的含义
public			对所有人开放				对所有人开放
protected		只有包内其它类、自己和子类可以访问	只有包内其它类、自己和子类可以访问
缺省			只有包内其它类可以访问			如果子类与父类在同一个包内：只有包内其它类可以访问
								否则：相当于private，不能访问
private			只有自己可以访问			不能访问

父类对其他都是封装的，所以即使是子类，也不能访问private的成员，但是从父类中继承的方法还是可以使用


super函数
	父类本身有构造函数，子类并不会继承到父类的构造函数，而且子类不能访问父类的private成员
	所以子类的构造函数中，使用super函数，来调用父类的构造函数

初始化顺序
	父类初始化->构造初始化->构造函数
	注意没有写super，就相当于super（），去匹配父类的无参数构造函数

变量名称问题
	在子类中定义的任何与父类名称相同的变量都是另外的一个变量，
	函数同理，所以如果子类中的函数需要调用父类的函数，但是，又有相同的函数，可以使用
	super.函数名，来调用父类的函数

多态
	也就是说，父类可以承载任何的子类，例如可以把子类赋值给父类，把子类作为参数，传递给需要父类的函数
	子类也可以存放在存父类的容器中

Java所有的对象变量都可以多态
	所有的对象变量都是需要动态分配内存的，而且都是在分配一起就获得了要分配的内存的信息，所以完全可以动态的变化
	确实是管理者，而不是所有者

关于对象变量的赋值问题
	所有的对象变量赋值都是指向的改变，不会有内容的复制，而且除了C++以外的，所有的OOP语言，对于这一点的处理都是相同的


Java类型系统
	Java实现了单根系统，即所有的对象都继承自一个共同的对象，该对象名称为Object
	在声明的时候，如果不声明继承自哪一个类，就会默认继承Object

Object的成员
tostring（）
equals（）

如果自己的类继承了object的equals（），那么为了能覆盖这个函数，必须要和object有完全相同的函数声明
在object中，该声明为 public boolean equals(Object o)
所以自己的函数也只能传入一个Object对象，为了能进行比较，那么在代码中，就应该强制转化（向下造型）


Stringbuf
	一个字符串的链表，可以调用append函数，来增加内容，最后转化为字符串，从而避免直接字符串操作带来的开销

程序设计原则
1.消除代码复制
2.封装降低耦合（即在一个类中修改，尽可能的不影响其他类）
3.可扩展性（需要的是预见性，预测以后哪里会修改，而不是所有地方都修改）
4.框架加数据
5.数据和表现分离（管数据的只管数据，怎么显示出来，又另外的类管理）（这样更具有扩展性）



implements关键字
	如果一个类实现了某个抽象类定义的接口，则可以使用这个关键字，从而可以视为那个抽象类

intrtface
	是Java中的一种特殊的class



Java异常
	语法和C++一致，不知道异常的名字，可以故意做一个，然后看命令行的提示
返回错误信息
getMessage函数
返回错误的堆栈信息
printStackTrace()函数

自定义异常
	如果需要throw自己的异常，该异常需要继承自Throwable，注意，抛出异常的时候，需要new一个对象，不能直接使用名字

抛出异常后，需要对异常进行声明，例如
public static void Openfile() throws OpenException { ....}
注意这里是陈述句，所以throw和extend一样有s
如果会抛出多个异常，使用使用逗号分隔
也可以继承自Exception，而且这个似乎更常用，有字符串的构造函数

异常捕捉机制
	因为这些异常是继承关系，所以有可能在一个try的catch中，包含父类和子类，Java中，按照catch的语句的顺序依次匹配，如果先出现了父类，那么子类实际上就不会被捕捉到，同时eclipse也会有提示，这是不可到达的代码
	因为一般的异常都是继承自Exception，所以如果catch这个，就会catch到所有的异常

系统的异常不需要声明

异常和继承
	如果父类有异常，子类不能抛出比父类多的异常，也就是说，要保证子类可以放到父类里面，同时父类的try代码不会有问题
	当然父类声明了异常，子类可以抛出该异常的子类，因为这样在父类的代码中还是可以捕捉到

	在构造函数中，子类必须包含父类的构造函数中，声明的所有异常，因为子类可能会调用父类的构造函数，子类函数的调用者，无法知道父类的构造函数会抛出什么异常，所以子类的构造函数必须声明父类具有的所有异常。同时，子类当然可以加上更多自己的异常，因为new的使用，是可以清楚的知道调用的是哪一个异常


可以再次抛出
语法类似


流
输入输出流
InputStream 和 OutStream

文件流
FileInputStream 和 FileOutputStream


流过滤器
	因为基本的文件流只能读写字节，所以如果需要写入一个int，会很困难
过滤器可以在流的基础上增加一些新的功能
DataOutputStream out = new DataOutputStream(new FileOutputStream("a.dat"))


文本输入输出
Reader 和 Writer
因为存在编码的问题，所以通常会是这个样子
PrintWriter out = new PrintWriter(
	new BufferedWriter(
		new OutputStreamWriter(
			new FileOutputStream("a.txt"))));
注意，如果有编码问题，可以在OutputStreamWriter或者InputStreamReader中第二个参数指定编码




Java核心技术补充笔记

Java源代码
	在jdk中，包含一个压缩包，名称是src.zip，其中包含公共类库的源码，如果需要更多源码，可以在网站上获取

main方法
	在java中main被定义为public static void 程序正常结束，向系统返回0，其他情况需要调用System.exit

boolean类型
	不能和int相互转化，从而在if中少写等号的问题可以避免

变量初始化
	如果把所有的变量都视为引用，那么因为不允许使用未初始化的变量，所以相当于这个对象不能为null，从而无法体现区别，从而能把基本数据类型也视为引用

定义常量
	使用fianl关键字，在Java中const是保留字，但是目前还没有使用

移位操作
	在C++中，左移存在逻辑左移和算数左移，在Java中只有一种，详细见《CSAPP》

Math库
	常见的数学运算都包含在该库中

比较相等
	因为使用==，是比较是否指向同一对象，所以比较内容是否相等，应该使用.equals

String类
	第一个字母大写，说明这不是一个基本类
String s = new String("a string")
String s = "hello"

String方法
s.charAt(index) 	//返回index位置的字符串，边界处理情况与数组一样
s.spilt()		//分割字符串，用法同python
substring（a,b）	//截取索引从a到b的字符串
+			//将两个字符串拼接在一起
	可以直接用字面量调用相关的内容，比如
String s = "abc";
"abcd".compareTo(s);
	Java中字符串不能修改，所以，所有的方法都是产生新的字符串
	其他API见Java核心技术P62，或者查看在线提示

构建字符串
	如果需要频繁的执行字符串的+，那么直接使用，会导致效率低下，此时应该使用StringBuilder，例如
StringBuilder builder = new StringBuilder();
	之后调用append方法添加，最后使用toString方法转化为字符串
	其他API见Java核心技术P66，或者查看在线提示

读取输入
	首先创建Scanner对象，然后将其与System.in关联即可，例如
Scanner in = new Scanner(System.in）;
	之后使用nextInt(),nextLine()之类的方法读入用户输入的值
	注意：该对象包含在java.util中

输出
	调用System.out中的方法，例如println(),.print(),printf()

时间和日期转化
	Java核心技术P70

文件输入与输出
	如果需要读取文件，可以将Scanner与一个文件关键，例如
Scanner in = new Scanner(new File("myfile.txt"))
	如过需要写文件，可以创建PrintWriter对象，例如
PrintWriter out = new PrintWriter("myfile.txt")
	之后可以对该对象调用System.out中的那些方法
	注意：文件名中的特殊字符前面需要加上\

流程控制
	Java相比C，取消了goto语句
	但是在for循环的前面可以使用一个标号（代表那个循环的名字），然后在break或者continue的时候，加上对应的标号，即可直接推出多重循环
OUT:
for(int i=0;i<10;i++)
{
	for(int j=0;j<10;j++)
	{
		if(i==j)
		{
			break OUT;
		}
	}
}

范围for循环
	循环的时候，会使得循环变量指向列表中的一个值，如果是基本数据类型，因为对其重新赋值，只是使其指向另外的内存，从而无效。
	但是对于其他类型，调用相应的方法可以改变状态，从而可以达到目的。
	可以预见，如果自定义的变量也只是单纯的赋值，原来的值也不会改变

大数值
	Java中提供了两个库，用于实现这一功能。BigInteger实现任意精度的整数运算，BigDecimal提供任意精度的浮点数运算
	因为Java没有重载运算符，所以基本操作都是相关的单词
	具体内容见Java核心技术P89，或者查看在线文档

数组的列表初始化，以及匿名数组
	数组有以下几种创建方式
int[] a = new int[10];
int[] b = {2,3,5,7,11,13};
new int[] {17,19,23,29,37};
	其中第三中方法可以用于对一个数字从新初始化

数组拷贝
	调用Arrays类的copyOf方法
int[] copied = Arrays.copyOf(luckNum,luckNum.length);
	Arrays中的其他方法见P95

命令行参数
	注意：在Java中，args[0]是第一个参数，而不是程序的名字

对象拷贝
	使用clone()方法，现在没网，等过几天补充（TODO）

Java类和文件名
	在命令行中直接执行Java的二进制代码时，不需要加上.class后缀，直接名字就可以了
	又因为文件名字必须和类名字保持一致，所以相当于是指定了类的名字

调用静态方法
	可以使用对象调用，但是这样可能造成混淆，所以最好直接使用类名调用

main方法
	每个类都可以有一个main方法，从而可以对类进行单元测试，在运行的时候，选择一个文件，指向该文件的main方法即可

默认构造函数
	即对类中的每一个对象执行默认初始化

构造函数的特殊用法
	可以把this作为变量名，调用其它构造函数，也就相当于C++中的委托构造函数了


包
	通过目录结构来管理各种源文件，避免名称冲突的，嵌套的包之间没有任何关系

导入其他包
	如果在一个package中，需要另外一个package中的文件，可以import对应的文件，例如
	import display.Display     //另外一个名为display的package中的Display类
	注意：因为只有一个public且与文件同名，所以这也是文件的名字
	注意这个display.Display也就是全名，所以如果不import，也可以直接使用

使用*导入
	可以使用package.*来引入package中所有的类，但是可能名字冲突，所以不推荐使用
	注意，导入并不会产生名字冲突，使用的时候才会冲突，此时可以直接指定全名来避免冲突
	在最后的字节码里面，相关调用肯定是使用的全名

静态导入
	即导入一个包的同时，可以导入这个包里面的静态方法，从而简化代码

包作用域
	没有public或者private声明的类，在包类的其他类可以访问

类路径
	与导入第三方库有关，具体见P149及第十章补充

类注释
	必须放在import语句之后，类的代码之前

其他注释
	P152

提取注释
	P155

类格式设计
	一个类应该按照以下方式排列，以方便其他人阅读
公用访问特征
包作用域访问特性
私有访问特征
	在每一部分中，按照以下顺序排列
实例方法
静态方法
实例域
静态域
	总体来说，就是突出重点，便于阅读

Java继承
	Java中，所有的继承都相当于C++中的public继承

重载父类函数已经调用父类函数
	如果想要重载父类函数，只需要定义一个同名的函数即可
	如果需要调用父类中的方法，使用supper.
	注意：supper不是一个对象，实际上更应该视为一个编译指示

supper与this
	两个都用两个作用，调用构造器和指示相关的函数。
	在子类的构造函数中，如果没有调用supper，则会默认调用supper（）
	如果父类没有无参数的构造函数，则程序报错

子类和父类的处理
	创建一个父类的数组，然后创建一个子类的数组，可以合法的将子类数组赋值给父类
	但是此时可以对父类数组操作，使其接受一个父类对象，但因为子类和父类的数组指向同一对象，所以，相当于在子类数组中，强行塞入了一个父类对象，之后调用子类的方法，就会产生ArrayStoreException

阻止继承
	在class前使用final关键字，该类中的所有方法都会变成final的，即不允许被子类覆盖
	其中的变量还是原来的属性

cast
	子类可以赋值给父类，但是父类不能赋值给子类，可以使用强制类型转化，但是如果这个转化不是可行的，将会产生ClassCastException异常。
	可以使用instanceof运算符来判断一个对象是否引用另外一个对象
	因为会运行环境会检查强制转化是否正确，所以使用这一特性的态度也与C++不同。但是自己写的代码中使用还是基本意味着类设计不合理

抽象类
	使用abstract修饰，位于public和class之间，创建抽象方法同理。
	意义与C++一致。

Java可见性控制关键字总结
private		仅本类自己可见
public		所有类可见
protect		本包以及所有子类可见
（空）		默认，不建议使用
	如果将一个变量标记为protect，则子类可以访问自己的该变量，通常不建议使用
	如果将一个方法标记为protect，即给类的子类才可以使用这个方法，有一定的意义

Object方法
	Object是所有类的父类，其中包含的方法，所有类都可以使用

Equals方法
	判断两个对象是否相等，Object中，比较两个对象是否是同一引用，通常需要自己实现
	实现规则如下：
1.判断是否是同一对象（this==otherObject）
2.判断是否为空（otherObject == null）
3.判断是否是同一类（getClass() == otherObject.getClass() ）
4.判断具体的值是否相同
	继承的子类
1.调用父类的euqals，如果相等，在判断子类的域中的值是否相等
	注意：调用的时候需要注意参数，否则可能并没有覆盖父类的方法，但是终是使用override标记是应该的

getClass方法
	返回一个包含对象信息的类对象。

HashCode方法
	由对象返回一个整数值，OBject中默认为对象的地址
	一般重新定义equals后，也需要重新定义hashcode，以确保equal返回true的两个对象的hanshcode的值也相同

ToString方法
	返回一个描述对象的字符串，通常以类名开头，其后为中括号括起来的具体值
	类名可以使用getName（）方法获得
	子类可以先使用supper.toString()调用父类的方法，然后自己在加上要输出的内容
	注意：基本数组应该使用静态方法的toString（）

getName()方法
	返回类的名字

getSupperclass（）
	以Clss对象的形式，返回这个类的超类

clone（）
	创建一个对象的副本。稍后补充（TODO）

ArrayList
	一个可以自动增长的类型。是泛型的，需要在创建时指定类型
	基本方法
ArrayList<T>(int initialCapacity)
boolean add(T obj)
T remove(int i)
int size()
void ensureCapacity(int capacity)
void trimToSize()
	获取值和设置值
	因为没有重载运算符，所以都是函数
set(i,obj)
get(i)
	可以使用toArray方法把ArrayList转存到数组中
	重载的函数
boolean add(int i,T obj)

对象包装器
	对于基本类型，有一个对应的对象类型。这些包裹类型将一个基本数据类型的数据转换成对象的形式，从而使得它们可以像对象一样参与运算和传递。下
Boolean  Character  Byte  Short  Integer  Long  Float  Double
	包裹类型就是把基本类型的名字的第一个字母大写。在Java的系统类库中，所有第一个字母大写的，都是类的名字。
	上述类型都是final，不能定义子类

自动打包
	例如list.add(3)会自动转化为list.add(new Integer(3))
	同样在将Integer赋值给int对象，会自动拆包
	int n = list.get(i)会转化为int n = list.get(i).intValue();

其他有关Integer的方法
	见P194

可变参数
	例如printf定义如下
public class PrintStream
{
	public PrintStream printf(String fmt, Object... args){ return format(frm,args);}
}
	其中的省略号，相当于是一个OBject[]

Java枚举类
	P196

Java反射
	P198

接口
	即定义一个类，该类描述了需要声明方法。
	注意：接口中的方法自动public，所以不需要再写public
	      只能提供定义，不能有任何实例域和静态方法，可以包含常量，默认public static final 
	例如对一个自定义类型的数组，希望调用Arrays类的sort方法，就需要实现Comparable接口
	即，需要以下两步
	1.将类声明为实现给定的接口（使用implements关键字）
	2.对接口中的所有方法进行定义

接口的特性
	不能new接口，但是可以创建一个接口变量，然后将new一个实现接口的类，然后将其赋给借口变量
	一个类可以实现多个接口，之间用逗号隔开

对象克隆
	使用clone需要满足以下条件
	1.实现Cloneable接口
	2.使用public访问符从新定义clone方法

一般构造方法
	首先把类声明为实现Cloneable，然后在函数中创建一个clone对象
	对其中的每一个子对象，调用子对象的clone方法，最后返回创建的clone对象
	如果子对象中有没有实现Cloneable的对象，抛出CLoneNotSupportException
	通常无法保证所有对象都有Clone，所以需要在定义中声明抛出这个异常
	同时对象也有选择处理这个异常的权利

内部类与代理
	目前没有实践价值（TODO）



如何在Java中导入数据库的JAR包
	在使用JDBC编程时需要连接数据库，导入JAR包是必须的，导入其它的jar包方法同样如此，导入的方法是 
打开eclipse
	1.右击要导入jar包的项目，点properties 
	2.左边选择java build path,右边选择libraries 
	3.选择add External jars 
	4.选择jar包的按照路径下的
确定后就行了。

Java连接MySQL的最新驱动包下载地址 
http://www.mysql.com/downloads/connector/j
	有两种方法导入jar包，第一种是先把jar包放在项目的目录下，通过添加jar包，是使用相对地址的，这样把项目复制到其它电脑也可以用
	第二种方法是导入外部的jar包，是绝对地址，如果项目要复制到其它电脑又要重新导入
	区别只是在于这些包存在的位置，在导入方法上并没有任何的区别

Java调试方法之一
	类似于C中的条件编译，可以在两个不同的包中，创建一些同名的类用于调试，其中一个输出，另外一个包中的类什么也不做，从而改变import的包实现不同的函数调用


资源释放问题
	一般情况下，除了内存以外的资源，都不应该交给垃圾回收器来处理，可以定义一个dispose()函数，从而在资源使用结束后，按照正确的顺序释放相关的资源。
	通常情况下，应该按照创建顺序相反的方式释放相关的资源（可以在多线程的情况下，一定程度的避免哲学家就餐问题）

空白final
	虽然在Java中final基本等价于C++中的const，但是在Java中定义的final变量，可以在定义的地方或者每一个构造函数中进行初始化，从而增加灵活性



